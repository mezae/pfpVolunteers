"use strict";var ApplicationConfiguration=function(){var applicationModuleName="meanww",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("letters"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.html"}).state("confirm",{url:"/settings/profile/first",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("login",{url:"/login",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("admin",{url:"/admin",templateUrl:"modules/letters/views/command.html"})}]),angular.module("core").controller("HeaderController",["$scope","$location","$modal","Authentication",function($scope,$location,$modal,Authentication){$scope.authentication=Authentication,$scope.isAdmin="AAA"===$scope.authentication.user.username,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.showTutorial=function(){if("/admin"===$location.path())$modal.open({templateUrl:"modules/core/views/adminTutorial.html",controller:"AdminModalController",backdrop:"static"});else if("/admin/email"===$location.path())$modal.open({templateUrl:"modules/core/views/emailTutorial.html",controller:"ModalInstanceCtrl",backdrop:"static"});else if($location.path().indexOf("/admin/email/")>=0)$modal.open({templateUrl:"modules/core/views/etemplateTutorial.html",controller:"ModalInstanceCtrl",backdrop:"static"});else if($location.path().indexOf("agency")>=0){var template=$scope.isAdmin?"modules/core/views/reviewTutorial.html":"modules/core/views/agencyTutorial.html";$modal.open({templateUrl:template,controller:"ModalInstanceCtrl",backdrop:"static"})}else $modal.open({size:"sm",templateUrl:"modules/core/views/noTutorial.html",controller:"ModalInstanceCtrl"})},$scope.isAdmin||0!==$scope.authentication.user.status||$scope.showTutorial()}]).controller("AdminModalController",["$scope","$modalInstance","$filter","Authentication","Users",function($scope,$modalInstance,$filter,Authentication,Users){function init(){$scope.user=Authentication.user,$scope.dueDate=$filter("date")($scope.user.due,"MM/dd/yy")}$scope.saveDueDate=function(){$scope.user.due=$scope.dueDate;var user=new Users($scope.user);user.$update(function(response){Authentication.user=response,init()},function(response){console.log(response.data.message)})},$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.minDate=new Date,$scope.dateOptions={showWeeks:!1},$scope.exit=function(){$modalInstance.close()},init()}]).controller("ModalInstanceCtrl",["$scope","$filter","$modalInstance","Agencies",function($scope,$filter,$modalInstance,Agencies){Agencies.query(function(users){var admin=_.find(users,{username:"AAA"});$scope.dueDate=$filter("date")(admin.due,"fullDate")}),$scope.ok=function(){$modalInstance.close()}}]),angular.module("core").controller("HomeController",["$scope","$location","Authentication",function($scope,$location,Authentication){function redirect(user){$location.path("admin"===user.role?"/admin":"/user/"+user._id)}$scope.user=Authentication.user,$scope.user&&redirect($scope.user)}]),angular.module("letters").config(["$compileProvider",function($compileProvider){$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|blob|chrome-extension):/)}]),angular.module("letters").config(["$stateProvider",function($stateProvider){$stateProvider.state("command",{url:"/admin/volunteers",templateUrl:"modules/letters/views/command.html"}).state("cc-events",{url:"/admin/events",templateUrl:"modules/letters/views/command.html"}).state("adminSettings",{url:"/admin/settings",templateUrl:"modules/letters/views/settings.html"}).state("events",{url:"/admin/event/:eventId",templateUrl:"modules/letters/views/events.html"}).state("tracking",{url:"/admin/user/:agencyId",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("summary",{url:"/admin/user/:agencyId/summary",templateUrl:"modules/users/views/settings/volunteer-summary.client.view.html"}).state("agTracking",{url:"/user/:agencyId",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"})}]),angular.module("letters").controller("CommandCenterController",["$scope","$window","$state","$http","$location","$filter","Authentication","Agencies","Events","Users","socket",function($scope,$window,$state,$http,$location,$filter,Authentication,Agencies,Events,Users,socket){function signup(credentials){$http.post("/auth/signup",credentials).success(function(response){console.log("new partner created")}).error(function(response){$scope.error=response.message})}$scope.user=Authentication.user,$scope.user||$location.path("/").replace(),$location.search()&&($scope.query=$location.search()),$scope.needToUpdate=!1,$scope.alert={active:!1,type:"",msg:""},$scope.viewUsers=function(){$scope.radioModel="users",$state.go("command",{},{notify:!0})},$scope.viewEvents=function(){$scope.radioModel="events",$state.go("cc-events",{},{notify:!0})},$scope.updateURL=function(undo){undo&&($scope.query.status=null),$scope.query.status?$location.search("status",$scope.query.status):$location.search("status",null)},$scope.find=function(){$scope.query="",$scope.radioModel="users",Agencies.query({},function(users){$scope.partners=users,socket.syncUpdates("users",$scope.partners)}),Events.query({},function(events){$scope.events=events,socket.syncUpdates("events",$scope.events)}),"/admin/events"===$state.current.url&&$scope.viewEvents()},$scope.fileInfo=function(element){$scope.$apply(function(){return $scope.file=element.files[0],$scope.file&&"CSV"!==$scope.file.name.split(".")[1].toUpperCase()?(alert("Must be a csv file!"),void($scope.file=null)):void 0})},$scope.handleFileSelect=function(){var file=$scope.file,reader=new FileReader;reader.onload=function(file){var content=file.target.result,rows=content.split(/[\r\n|\n]+/),headers=rows.shift();if("users"===$scope.radioModel){var required_fields=["First Name","Last Name","Gender","Cont."],missing_fields=[];if(_.forEach(required_fields,function(field){_.includes(headers,field)||missing_fields.push(field)}),missing_fields.length)$scope.alert={active:!0,type:"danger",msg:"Your csv file could not be uploaded. It is missing the following columns: "+missing_fields.join(", ")+"."};else{headers=headers.split(",");var fname_col=headers.indexOf("First Name"),lname_col=headers.indexOf("Last Name"),gender_col=headers.indexOf("Gender"),cont_col=headers.indexOf("Cont."),allUsers=_.map($scope.partners,function(users){return(users.first_name.trim()+" "+users.last_name.trim()).trim()});_.forEach(rows,function(row){var record=row.split(",");if(_.includes(allUsers,(record[fname_col].trim()+" "+record[lname_col].trim()).trim())){var updated_partner=_.filter($scope.partners,function(user){return(user.first_name.trim()+" "+user.last_name.trim()).trim()===(record[fname_col].trim()+" "+record[lname_col].trim()).trim()})[0];updated_partner.hours+=parseFloat(record[hours_col],10),Agencies.update(updated_partner)}else{var newPartner={username:record[fname_col].trim().slice(1)+record[lname_col].trim()+record[cont_col],first_name:record[fname_col].trim(),last_name:record[lname_col].trim(),gender:record[gender_col],contingent:record[cont_col],submitted:!0};signup(newPartner),allUsers.push(newPartner.first_name+" "+newPartner.last_name)}}),$scope.alert={active:!0,type:"success",msg:"Your csv file was uploaded successfully."}}}else{var required_fields=["First Name","Last Name"],missing_fields=[];if(_.forEach(required_fields,function(field){_.includes(headers,field)||missing_fields.push(field)}),missing_fields.length)$scope.alert={active:!0,type:"danger",msg:"Your csv file could not be uploaded. It is missing the following columns: "+missing_fields.join(", ")+"."};else{headers=headers.split(",");for(var fname_col=headers.indexOf("First Name"),lname_col=headers.indexOf("Last Name"),i=0;i<rows.length;i++)rows[i]=rows[i].split(",");for(var first_event=lname_col+1,last_event=headers.length-1,e=first_event;last_event>=e;e++){$scope.event={date:headers[e],volunteers:[]};for(var user=0;user<rows.length;user++){var yourHours=parseFloat(rows[user][e],10);if(yourHours>0){var volunteer={name:(rows[user][fname_col].trim()+" "+rows[user][lname_col].trim()).trim(),hours:yourHours},newVol=_.filter($scope.partners,function(user){return user.first_name+" "+user.last_name===volunteer.name})[0];newVol&&($scope.event.volunteers.push(volunteer),newVol.hours+=volunteer.hours,Agencies.update(newVol))}}$scope.save()}$scope.alert={active:!0,type:"success",msg:"Your csv file was uploaded successfully."}}}},reader.readAsText(file),$scope.needToUpdate=!1,$scope.file=null},$scope.save=function(){$scope.alert.active=!1,"users"===$scope.radioModel?$scope.isNewAgency?_.find($scope.partners,{username:$scope.partner.username})?$scope.alert={active:!0,type:"danger",msg:$scope.partner.username+" already exists. Please edit the existing copy to avoid duplicates."}:signup($scope.partner):Agencies.update($scope.partner):$scope.isNewAgency?Events.save($scope.event,function(){console.log("great!")}):Events.update($scope.event),$scope.hideSidebar()},$scope.deleteBox=function(selected){var box_name,box_api;"users"===$scope.radioModel?(box_name=selected.username,box_api="/agency/"):(box_name=$filter("date")(selected.date,"shortDate"),box_api="/events/");var confirmation=$window.prompt("Please type DELETE to remove "+box_name+".");"DELETE"===confirmation&&$http["delete"](box_api+selected._id)},$scope.showSidebar=function(selected){$scope.isNewAgency=selected?!1:!0,$scope.event=selected,$scope.needToUpdate=!0},$scope.hideSidebar=function(){$scope.partner=null,$scope.needToUpdate=!1},$scope.$on("$destroy",function(){socket.unsyncUpdates("users"),socket.unsyncUpdates("events")}),$scope.writeServiceLetter=function(student_id){$http.get("/agency/"+student_id+"/pdf",{responseType:"arraybuffer"}).success(function(data){var file=new Blob([data],{type:"application/pdf"}),fileURL=$window.URL.createObjectURL(file);$window.open(fileURL)})},$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.dateOptions={showWeeks:!1}}]),angular.module("letters").controller("EventsController",["$scope","$window","$stateParams","$location","$filter","$timeout","Authentication","Events","Agencies","Users","socket",function($scope,$window,$stateParams,$location,$filter,$timeout,Authentication,Events,Agencies,Users,socket){Authentication.user||$location.path("/");var allUsers=null;$scope.calculateHours=function(){$scope.eventTotal=0;for(var i=0;i<$scope.currentEvent.volunteers.length;i++)$scope.eventTotal+=$scope.currentEvent.volunteers[i].hours},$scope.find=function(){Agencies.query({},function(users){allUsers=users,$scope.users=_.filter(users,function(u){return""!==u.first_name&&"admin"!==u.role}),socket.syncUpdates("users",allUsers)}),Events.get({eventId:$stateParams.eventId},function(event){$scope.currentEvent=event,$scope.calculateHours()})},$scope.rememberOldVol=function(volunteer){$scope.currentEdit=volunteer,$scope.oldVol={name:volunteer.name,hours:volunteer.hours}},$scope.updateVolunteer=function(volunteer){var hourDifference=volunteer.hours-$scope.oldVol.hours;if(0!==hourDifference){var newVol=_.filter($scope.users,function(user){return user.first_name+" "+user.last_name===volunteer.name})[0];Events.update($scope.currentEvent,function(response){newVol.hours+=hourDifference,$scope.currentEvent=response,$scope.calculateHours(),Agencies.update(newVol)})}$scope.currentEdit=null},$scope.addVolunteer=function(){$scope.newVolunteer=!0,$scope.currentEdit=null},$scope.cancel=function(){$scope.newVolunteer=!1,$scope.newVol=null},$scope.save=function(){$scope.volProfile=$scope.users[$scope.volProfile],$scope.volProfile.hours+=$scope.newVol.hours,$scope.newVol.name=$scope.volProfile.first_name+" "+$scope.volProfile.last_name,$scope.currentEvent.volunteers.push($scope.newVol),Events.update($scope.currentEvent,function(response){$scope.newVol=null,$scope.newVolunteer=!1,$scope.currentEvent=response,$scope.calculateHours(),Agencies.update($scope.volProfile,function(response){$scope.volProfile=null})})},$scope.deleteVolunteer=function(index){var confirmation=$window.prompt("Please type DELETE to remove "+$scope.currentEdit.name+".");if("DELETE"===confirmation){var oldVol=$scope.currentEvent.volunteers.splice(index,1),newVol=_.find(allUsers,function(users){return users.first_name+" "+users.last_name===oldVol[0].name});Events.update($scope.currentEvent,function(response){newVol.hours-=oldVol[0].hours,$scope.currentEvent=response,$scope.calculateHours(),Agencies.update(newVol,function(response){$scope.users.push(response)})})}},$scope.$on("$destroy",function(){socket.unsyncUpdates("users")})}]),angular.module("letters").controller("myController",["$scope","$window","$modal","$location","$filter","$http","Authentication","Users","Events",function($scope,$window,$modal,$location,$filter,$http,Authentication,Users,Events){$scope.user=Authentication.user,$scope.user||$location.path("/").replace(),$scope.startDate=null,$scope.endDate=null,$scope.calendar={opened:{},dateFormat:"MM/dd/yyyy",dateOptions:{showWeeks:!1},open:function($event,calID){$event.preventDefault(),$event.stopPropagation(),$scope.calendar.opened[calID]=!0}},$scope.downloadCSV=function(){if($scope.error=null,$scope.total=null,$scope.startDate&&$scope.endDate)if($scope.startDate>$scope.endDate)$scope.error="Start date must come before or be equal to end date.";else{var headers=["track","type","name","age","gender","gift"];headers.push("flagged");var csvString=headers.join(",")+"\r\n",Recipients=Events.query({start:$scope.startDate,end:$scope.endDate},function(){$scope.total=Recipients.length,_.forEach(Recipients,function(letter){var type=letter.track.charAt(3);letter.type="C"===type?"child":"T"===type?"teen":"senior",_.forEach(headers,function(key){var line=letter[key];"gift"===key&&_.indexOf(letter[key],",")&&(line='"'+letter[key]+'"'),csvString+=line+","}),csvString+="\r\n"});var date=$filter("date")(new Date,"MM-dd");$scope.fileName="WishesToSF_"+date+".csv";var blob=new Blob([csvString],{type:"text/csv;charset=UTF-8"});$scope.url=$window.URL.createObjectURL(blob)})}else $scope.error="Please enter a start date and an end date."},$scope.reset=function(){var confirmation=$window.prompt("Type DELETE to wipe all data");"DELETE"===confirmation&&$http.get("/users/reset").success(function(response){Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("letters").factory("Agencies",["$resource",function($resource){return $resource("agency/:agencyId",{agencyId:"@_id"},{update:{method:"PUT"}})}]),angular.module("letters").factory("Events",["$resource",function($resource){return $resource("events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}})}]),angular.module("letters").factory("socket",["socketFactory",function(socketFactory){var ioSocket=io("",{path:"/socket.io-client"}),socket=socketFactory({ioSocket:ioSocket});return{socket:socket,syncUpdates:function(modelName,array,cb){cb=cb||angular.noop,socket.on(modelName+":save",function(item){var oldItem=_.find(array,{_id:item._id}),index=array.indexOf(oldItem),event="created";oldItem?(array.splice(index,1,item),event="updated"):array.push(item),cb(event,item,array)}),socket.on(modelName+":remove",function(item){var event="deleted";_.remove(array,{_id:item._id}),cb(event,item,array)})},unsyncUpdates:function(modelName){socket.removeAllListeners(modelName+":save"),socket.removeAllListeners(modelName+":remove")}}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile/edit",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){function redirect(user){$location.path("admin"===user.role?"/admin":"/user/"+user._id)}$scope.user=Authentication.user,$scope.user&&redirect($scope.user),$scope.signin=function(form){$http.post("/auth/signin",$scope.credentials).success(function(response){Authentication.user=response,$scope.user=Authentication.user,redirect(response)}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","$stateParams","Users","Agencies","Authentication","Events",function($scope,$http,$location,$stateParams,Users,Agencies,Authentication,Events){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.currentUser=Agencies.get({agencyId:$stateParams.agencyId}),$scope.viewVolunteerSummary=function(){$location.path("/admin/user/"+$stateParams.agencyId+"/summary")},$scope.updateUserProfile=function(isValid){isValid?($scope.success=$scope.error=null,Agencies.update($scope.currentUser)):$scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SummaryController",["$scope","$http","$location","$stateParams","Users","Agencies","Authentication","Events",function($scope,$http,$location,$stateParams,Users,Agencies,Authentication,Events){$scope.user=Authentication.user,$scope.find=function(){$scope.user&&"user"!==$scope.user.role||$location.path("/"),Agencies.get({agencyId:$stateParams.agencyId},function(user){$scope.currentUser=user,$scope.relatedEvents=Events.query({},function(){$scope.relatedEvents=_.filter($scope.relatedEvents,function(event){return _.find(event.volunteers,{name:$scope.currentUser.first_name+" "+$scope.currentUser.last_name})}),$scope.relatedEvents=_.map($scope.relatedEvents,function(event){return event.volunteers=_.find(event.volunteers,{name:$scope.currentUser.first_name+" "+$scope.currentUser.last_name}),event})})})},$scope.viewContactInfo=function(){$location.path("/admin/user/"+$stateParams.agencyId)}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);